name: Create and publish container image

# Configures this workflow to run every time a tag is pushed
on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# Defines environment variables for the workflow
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: ui/yarn.lock

      - name: Install UI dependencies
        working-directory: ui
        run: yarn install --frozen-lockfile

      - name: Build UI
        run: ./hack/update-ui.sh

      # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses docker/metadata-action to extract tags and labels that will be applied to the specified image.
      - name: Extract metadata (tags, labels) for container
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Setup ko
        uses: ko-build/setup-ko@v0.7

      # This step uses ko to build the image and push it to GitHub Packages.
      - name: Build and push container image with ko
        id: push
        env:
          KO_DOCKER_REPO: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          # Extract the tag from metadata (ko expects just the tag, not full image reference)
          TAG=$(echo "$TAGS" | head -n1 | sed 's/.*://')
          echo "Building with tag: $TAG"
          
          # Build and push with ko
          IMAGE_REF=$(ko build --tags="$TAG" --platform=all --base-import-paths ./cmd/sockeye)
          echo "Full image reference: $IMAGE_REF"
          
          # Extract just the digest part (after @)
          IMAGE_DIGEST=$(echo "$IMAGE_REF" | sed 's/.*@//')
          echo "Extracted digest: $IMAGE_DIGEST"
          echo "image-digest=$IMAGE_DIGEST" >> $GITHUB_OUTPUT
          
          # Generate release artifact
          ko resolve --tags="$TAG" --platform=all --base-import-paths -f ./config/ > release.yaml

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release.yaml
          draft: false
          prerelease: false
